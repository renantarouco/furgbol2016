// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mensagem_ia_simulador2D.proto

#ifndef PROTOBUF_mensagem_5fia_5fsimulador2D_2eproto__INCLUDED
#define PROTOBUF_mensagem_5fia_5fsimulador2D_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "messages_robocup_ssl_referee.pb.h"
#include "mensagem_gerente_visao.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mensagem_5fia_5fsimulador2D_2eproto();
void protobuf_AssignDesc_mensagem_5fia_5fsimulador2D_2eproto();
void protobuf_ShutdownFile_mensagem_5fia_5fsimulador2D_2eproto();

class PacotePathPlanning;
class PacoteRoboIA;
class PacoteIASimulador2D;

enum PacoteIASimulador2D_CorEquipe {
  PacoteIASimulador2D_CorEquipe_AMARELO = 0,
  PacoteIASimulador2D_CorEquipe_AZUL = 1
};
bool PacoteIASimulador2D_CorEquipe_IsValid(int value);
const PacoteIASimulador2D_CorEquipe PacoteIASimulador2D_CorEquipe_CorEquipe_MIN = PacoteIASimulador2D_CorEquipe_AMARELO;
const PacoteIASimulador2D_CorEquipe PacoteIASimulador2D_CorEquipe_CorEquipe_MAX = PacoteIASimulador2D_CorEquipe_AZUL;
const int PacoteIASimulador2D_CorEquipe_CorEquipe_ARRAYSIZE = PacoteIASimulador2D_CorEquipe_CorEquipe_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacoteIASimulador2D_CorEquipe_descriptor();
inline const ::std::string& PacoteIASimulador2D_CorEquipe_Name(PacoteIASimulador2D_CorEquipe value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacoteIASimulador2D_CorEquipe_descriptor(), value);
}
inline bool PacoteIASimulador2D_CorEquipe_Parse(
    const ::std::string& name, PacoteIASimulador2D_CorEquipe* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacoteIASimulador2D_CorEquipe>(
    PacoteIASimulador2D_CorEquipe_descriptor(), name, value);
}
enum PacoteIASimulador2D_LadoCampo {
  PacoteIASimulador2D_LadoCampo_ESQUERDO = 0,
  PacoteIASimulador2D_LadoCampo_DIREITO = 1
};
bool PacoteIASimulador2D_LadoCampo_IsValid(int value);
const PacoteIASimulador2D_LadoCampo PacoteIASimulador2D_LadoCampo_LadoCampo_MIN = PacoteIASimulador2D_LadoCampo_ESQUERDO;
const PacoteIASimulador2D_LadoCampo PacoteIASimulador2D_LadoCampo_LadoCampo_MAX = PacoteIASimulador2D_LadoCampo_DIREITO;
const int PacoteIASimulador2D_LadoCampo_LadoCampo_ARRAYSIZE = PacoteIASimulador2D_LadoCampo_LadoCampo_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacoteIASimulador2D_LadoCampo_descriptor();
inline const ::std::string& PacoteIASimulador2D_LadoCampo_Name(PacoteIASimulador2D_LadoCampo value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacoteIASimulador2D_LadoCampo_descriptor(), value);
}
inline bool PacoteIASimulador2D_LadoCampo_Parse(
    const ::std::string& name, PacoteIASimulador2D_LadoCampo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacoteIASimulador2D_LadoCampo>(
    PacoteIASimulador2D_LadoCampo_descriptor(), name, value);
}
// ===================================================================

class PacotePathPlanning : public ::google::protobuf::Message {
 public:
  PacotePathPlanning();
  virtual ~PacotePathPlanning();
  
  PacotePathPlanning(const PacotePathPlanning& from);
  
  inline PacotePathPlanning& operator=(const PacotePathPlanning& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PacotePathPlanning& default_instance();
  
  void Swap(PacotePathPlanning* other);
  
  // implements Message ----------------------------------------------
  
  PacotePathPlanning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacotePathPlanning& from);
  void MergeFrom(const PacotePathPlanning& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated float x = 1;
  inline int x_size() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x(int index) const;
  inline void set_x(int index, float value);
  inline void add_x(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      x() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_x();
  
  // repeated float y = 2;
  inline int y_size() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y(int index) const;
  inline void set_y(int index, float value);
  inline void add_y(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      y() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_y();
  
  // @@protoc_insertion_point(class_scope:PacotePathPlanning)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< float > x_;
  ::google::protobuf::RepeatedField< float > y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_mensagem_5fia_5fsimulador2D_2eproto();
  friend void protobuf_AssignDesc_mensagem_5fia_5fsimulador2D_2eproto();
  friend void protobuf_ShutdownFile_mensagem_5fia_5fsimulador2D_2eproto();
  
  void InitAsDefaultInstance();
  static PacotePathPlanning* default_instance_;
};
// -------------------------------------------------------------------

class PacoteRoboIA : public ::google::protobuf::Message {
 public:
  PacoteRoboIA();
  virtual ~PacoteRoboIA();
  
  PacoteRoboIA(const PacoteRoboIA& from);
  
  inline PacoteRoboIA& operator=(const PacoteRoboIA& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PacoteRoboIA& default_instance();
  
  void Swap(PacoteRoboIA* other);
  
  // implements Message ----------------------------------------------
  
  PacoteRoboIA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacoteRoboIA& from);
  void MergeFrom(const PacoteRoboIA& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float velX = 4;
  inline bool has_velx() const;
  inline void clear_velx();
  static const int kVelXFieldNumber = 4;
  inline float velx() const;
  inline void set_velx(float value);
  
  // optional float velY = 5;
  inline bool has_vely() const;
  inline void clear_vely();
  static const int kVelYFieldNumber = 5;
  inline float vely() const;
  inline void set_vely(float value);
  
  // optional float orientation = 6;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 6;
  inline float orientation() const;
  inline void set_orientation(float value);
  
  // optional string skill = 7;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 7;
  inline const ::std::string& skill() const;
  inline void set_skill(const ::std::string& value);
  inline void set_skill(const char* value);
  inline void set_skill(const char* value, size_t size);
  inline ::std::string* mutable_skill();
  inline ::std::string* release_skill();
  
  // optional string tatica = 8;
  inline bool has_tatica() const;
  inline void clear_tatica();
  static const int kTaticaFieldNumber = 8;
  inline const ::std::string& tatica() const;
  inline void set_tatica(const ::std::string& value);
  inline void set_tatica(const char* value);
  inline void set_tatica(const char* value, size_t size);
  inline ::std::string* mutable_tatica();
  inline ::std::string* release_tatica();
  
  // repeated string informacoesSensorias = 9;
  inline int informacoessensorias_size() const;
  inline void clear_informacoessensorias();
  static const int kInformacoesSensoriasFieldNumber = 9;
  inline const ::std::string& informacoessensorias(int index) const;
  inline ::std::string* mutable_informacoessensorias(int index);
  inline void set_informacoessensorias(int index, const ::std::string& value);
  inline void set_informacoessensorias(int index, const char* value);
  inline void set_informacoessensorias(int index, const char* value, size_t size);
  inline ::std::string* add_informacoessensorias();
  inline void add_informacoessensorias(const ::std::string& value);
  inline void add_informacoessensorias(const char* value);
  inline void add_informacoessensorias(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& informacoessensorias() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_informacoessensorias();
  
  // optional float alvoX = 10;
  inline bool has_alvox() const;
  inline void clear_alvox();
  static const int kAlvoXFieldNumber = 10;
  inline float alvox() const;
  inline void set_alvox(float value);
  
  // optional float alvoY = 11;
  inline bool has_alvoy() const;
  inline void clear_alvoy();
  static const int kAlvoYFieldNumber = 11;
  inline float alvoy() const;
  inline void set_alvoy(float value);
  
  // optional .PacotePathPlanning pathPlanning = 12;
  inline bool has_pathplanning() const;
  inline void clear_pathplanning();
  static const int kPathPlanningFieldNumber = 12;
  inline const ::PacotePathPlanning& pathplanning() const;
  inline ::PacotePathPlanning* mutable_pathplanning();
  inline ::PacotePathPlanning* release_pathplanning();
  
  // optional float vel_ang = 13;
  inline bool has_vel_ang() const;
  inline void clear_vel_ang();
  static const int kVelAngFieldNumber = 13;
  inline float vel_ang() const;
  inline void set_vel_ang(float value);
  
  // optional float chute_baixo = 14;
  inline bool has_chute_baixo() const;
  inline void clear_chute_baixo();
  static const int kChuteBaixoFieldNumber = 14;
  inline float chute_baixo() const;
  inline void set_chute_baixo(float value);
  
  // optional float chute_alto = 15;
  inline bool has_chute_alto() const;
  inline void clear_chute_alto();
  static const int kChuteAltoFieldNumber = 15;
  inline float chute_alto() const;
  inline void set_chute_alto(float value);
  
  // optional float drible_ligado = 16;
  inline bool has_drible_ligado() const;
  inline void clear_drible_ligado();
  static const int kDribleLigadoFieldNumber = 16;
  inline float drible_ligado() const;
  inline void set_drible_ligado(float value);
  
  // @@protoc_insertion_point(class_scope:PacoteRoboIA)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_velx();
  inline void clear_has_velx();
  inline void set_has_vely();
  inline void clear_has_vely();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_tatica();
  inline void clear_has_tatica();
  inline void set_has_alvox();
  inline void clear_has_alvox();
  inline void set_has_alvoy();
  inline void clear_has_alvoy();
  inline void set_has_pathplanning();
  inline void clear_has_pathplanning();
  inline void set_has_vel_ang();
  inline void clear_has_vel_ang();
  inline void set_has_chute_baixo();
  inline void clear_has_chute_baixo();
  inline void set_has_chute_alto();
  inline void clear_has_chute_alto();
  inline void set_has_drible_ligado();
  inline void clear_has_drible_ligado();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  float x_;
  float y_;
  float velx_;
  float vely_;
  float orientation_;
  ::std::string* skill_;
  ::std::string* tatica_;
  ::google::protobuf::RepeatedPtrField< ::std::string> informacoessensorias_;
  float alvox_;
  float alvoy_;
  ::PacotePathPlanning* pathplanning_;
  float vel_ang_;
  float chute_baixo_;
  float chute_alto_;
  float drible_ligado_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_mensagem_5fia_5fsimulador2D_2eproto();
  friend void protobuf_AssignDesc_mensagem_5fia_5fsimulador2D_2eproto();
  friend void protobuf_ShutdownFile_mensagem_5fia_5fsimulador2D_2eproto();
  
  void InitAsDefaultInstance();
  static PacoteRoboIA* default_instance_;
};
// -------------------------------------------------------------------

class PacoteIASimulador2D : public ::google::protobuf::Message {
 public:
  PacoteIASimulador2D();
  virtual ~PacoteIASimulador2D();
  
  PacoteIASimulador2D(const PacoteIASimulador2D& from);
  
  inline PacoteIASimulador2D& operator=(const PacoteIASimulador2D& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PacoteIASimulador2D& default_instance();
  
  void Swap(PacoteIASimulador2D* other);
  
  // implements Message ----------------------------------------------
  
  PacoteIASimulador2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacoteIASimulador2D& from);
  void MergeFrom(const PacoteIASimulador2D& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PacoteIASimulador2D_CorEquipe CorEquipe;
  static const CorEquipe AMARELO = PacoteIASimulador2D_CorEquipe_AMARELO;
  static const CorEquipe AZUL = PacoteIASimulador2D_CorEquipe_AZUL;
  static inline bool CorEquipe_IsValid(int value) {
    return PacoteIASimulador2D_CorEquipe_IsValid(value);
  }
  static const CorEquipe CorEquipe_MIN =
    PacoteIASimulador2D_CorEquipe_CorEquipe_MIN;
  static const CorEquipe CorEquipe_MAX =
    PacoteIASimulador2D_CorEquipe_CorEquipe_MAX;
  static const int CorEquipe_ARRAYSIZE =
    PacoteIASimulador2D_CorEquipe_CorEquipe_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CorEquipe_descriptor() {
    return PacoteIASimulador2D_CorEquipe_descriptor();
  }
  static inline const ::std::string& CorEquipe_Name(CorEquipe value) {
    return PacoteIASimulador2D_CorEquipe_Name(value);
  }
  static inline bool CorEquipe_Parse(const ::std::string& name,
      CorEquipe* value) {
    return PacoteIASimulador2D_CorEquipe_Parse(name, value);
  }
  
  typedef PacoteIASimulador2D_LadoCampo LadoCampo;
  static const LadoCampo ESQUERDO = PacoteIASimulador2D_LadoCampo_ESQUERDO;
  static const LadoCampo DIREITO = PacoteIASimulador2D_LadoCampo_DIREITO;
  static inline bool LadoCampo_IsValid(int value) {
    return PacoteIASimulador2D_LadoCampo_IsValid(value);
  }
  static const LadoCampo LadoCampo_MIN =
    PacoteIASimulador2D_LadoCampo_LadoCampo_MIN;
  static const LadoCampo LadoCampo_MAX =
    PacoteIASimulador2D_LadoCampo_LadoCampo_MAX;
  static const int LadoCampo_ARRAYSIZE =
    PacoteIASimulador2D_LadoCampo_LadoCampo_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LadoCampo_descriptor() {
    return PacoteIASimulador2D_LadoCampo_descriptor();
  }
  static inline const ::std::string& LadoCampo_Name(LadoCampo value) {
    return PacoteIASimulador2D_LadoCampo_Name(value);
  }
  static inline bool LadoCampo_Parse(const ::std::string& name,
      LadoCampo* value) {
    return PacoteIASimulador2D_LadoCampo_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PacoteBola bola = 1;
  inline bool has_bola() const;
  inline void clear_bola();
  static const int kBolaFieldNumber = 1;
  inline const ::PacoteBola& bola() const;
  inline ::PacoteBola* mutable_bola();
  inline ::PacoteBola* release_bola();
  
  // optional .SSL_Referee dadosEstados = 2;
  inline bool has_dadosestados() const;
  inline void clear_dadosestados();
  static const int kDadosEstadosFieldNumber = 2;
  inline const ::SSL_Referee& dadosestados() const;
  inline ::SSL_Referee* mutable_dadosestados();
  inline ::SSL_Referee* release_dadosestados();
  
  // optional string jogada = 3;
  inline bool has_jogada() const;
  inline void clear_jogada();
  static const int kJogadaFieldNumber = 3;
  inline const ::std::string& jogada() const;
  inline void set_jogada(const ::std::string& value);
  inline void set_jogada(const char* value);
  inline void set_jogada(const char* value, size_t size);
  inline ::std::string* mutable_jogada();
  inline ::std::string* release_jogada();
  
  // repeated string fatosDoMundo = 4;
  inline int fatosdomundo_size() const;
  inline void clear_fatosdomundo();
  static const int kFatosDoMundoFieldNumber = 4;
  inline const ::std::string& fatosdomundo(int index) const;
  inline ::std::string* mutable_fatosdomundo(int index);
  inline void set_fatosdomundo(int index, const ::std::string& value);
  inline void set_fatosdomundo(int index, const char* value);
  inline void set_fatosdomundo(int index, const char* value, size_t size);
  inline ::std::string* add_fatosdomundo();
  inline void add_fatosdomundo(const ::std::string& value);
  inline void add_fatosdomundo(const char* value);
  inline void add_fatosdomundo(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& fatosdomundo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fatosdomundo();
  
  // repeated .PacoteRoboIA robos = 5;
  inline int robos_size() const;
  inline void clear_robos();
  static const int kRobosFieldNumber = 5;
  inline const ::PacoteRoboIA& robos(int index) const;
  inline ::PacoteRoboIA* mutable_robos(int index);
  inline ::PacoteRoboIA* add_robos();
  inline const ::google::protobuf::RepeatedPtrField< ::PacoteRoboIA >&
      robos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PacoteRoboIA >*
      mutable_robos();
  
  // repeated .PacoteRobo robosAdv = 6;
  inline int robosadv_size() const;
  inline void clear_robosadv();
  static const int kRobosAdvFieldNumber = 6;
  inline const ::PacoteRobo& robosadv(int index) const;
  inline ::PacoteRobo* mutable_robosadv(int index);
  inline ::PacoteRobo* add_robosadv();
  inline const ::google::protobuf::RepeatedPtrField< ::PacoteRobo >&
      robosadv() const;
  inline ::google::protobuf::RepeatedPtrField< ::PacoteRobo >*
      mutable_robosadv();
  
  // required .PacoteIASimulador2D.CorEquipe corEquipe = 7;
  inline bool has_corequipe() const;
  inline void clear_corequipe();
  static const int kCorEquipeFieldNumber = 7;
  inline ::PacoteIASimulador2D_CorEquipe corequipe() const;
  inline void set_corequipe(::PacoteIASimulador2D_CorEquipe value);
  
  // optional .PacoteIASimulador2D.LadoCampo ladoCampo = 8;
  inline bool has_ladocampo() const;
  inline void clear_ladocampo();
  static const int kLadoCampoFieldNumber = 8;
  inline ::PacoteIASimulador2D_LadoCampo ladocampo() const;
  inline void set_ladocampo(::PacoteIASimulador2D_LadoCampo value);
  
  // @@protoc_insertion_point(class_scope:PacoteIASimulador2D)
 private:
  inline void set_has_bola();
  inline void clear_has_bola();
  inline void set_has_dadosestados();
  inline void clear_has_dadosestados();
  inline void set_has_jogada();
  inline void clear_has_jogada();
  inline void set_has_corequipe();
  inline void clear_has_corequipe();
  inline void set_has_ladocampo();
  inline void clear_has_ladocampo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PacoteBola* bola_;
  ::SSL_Referee* dadosestados_;
  ::std::string* jogada_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fatosdomundo_;
  ::google::protobuf::RepeatedPtrField< ::PacoteRoboIA > robos_;
  ::google::protobuf::RepeatedPtrField< ::PacoteRobo > robosadv_;
  int corequipe_;
  int ladocampo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_mensagem_5fia_5fsimulador2D_2eproto();
  friend void protobuf_AssignDesc_mensagem_5fia_5fsimulador2D_2eproto();
  friend void protobuf_ShutdownFile_mensagem_5fia_5fsimulador2D_2eproto();
  
  void InitAsDefaultInstance();
  static PacoteIASimulador2D* default_instance_;
};
// ===================================================================


// ===================================================================

// PacotePathPlanning

// repeated float x = 1;
inline int PacotePathPlanning::x_size() const {
  return x_.size();
}
inline void PacotePathPlanning::clear_x() {
  x_.Clear();
}
inline float PacotePathPlanning::x(int index) const {
  return x_.Get(index);
}
inline void PacotePathPlanning::set_x(int index, float value) {
  x_.Set(index, value);
}
inline void PacotePathPlanning::add_x(float value) {
  x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PacotePathPlanning::x() const {
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
PacotePathPlanning::mutable_x() {
  return &x_;
}

// repeated float y = 2;
inline int PacotePathPlanning::y_size() const {
  return y_.size();
}
inline void PacotePathPlanning::clear_y() {
  y_.Clear();
}
inline float PacotePathPlanning::y(int index) const {
  return y_.Get(index);
}
inline void PacotePathPlanning::set_y(int index, float value) {
  y_.Set(index, value);
}
inline void PacotePathPlanning::add_y(float value) {
  y_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PacotePathPlanning::y() const {
  return y_;
}
inline ::google::protobuf::RepeatedField< float >*
PacotePathPlanning::mutable_y() {
  return &y_;
}

// -------------------------------------------------------------------

// PacoteRoboIA

// optional uint32 id = 1;
inline bool PacoteRoboIA::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacoteRoboIA::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacoteRoboIA::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacoteRoboIA::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PacoteRoboIA::id() const {
  return id_;
}
inline void PacoteRoboIA::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional float x = 2;
inline bool PacoteRoboIA::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacoteRoboIA::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacoteRoboIA::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacoteRoboIA::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PacoteRoboIA::x() const {
  return x_;
}
inline void PacoteRoboIA::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 3;
inline bool PacoteRoboIA::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacoteRoboIA::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacoteRoboIA::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacoteRoboIA::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PacoteRoboIA::y() const {
  return y_;
}
inline void PacoteRoboIA::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float velX = 4;
inline bool PacoteRoboIA::has_velx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacoteRoboIA::set_has_velx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacoteRoboIA::clear_has_velx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacoteRoboIA::clear_velx() {
  velx_ = 0;
  clear_has_velx();
}
inline float PacoteRoboIA::velx() const {
  return velx_;
}
inline void PacoteRoboIA::set_velx(float value) {
  set_has_velx();
  velx_ = value;
}

// optional float velY = 5;
inline bool PacoteRoboIA::has_vely() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacoteRoboIA::set_has_vely() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacoteRoboIA::clear_has_vely() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacoteRoboIA::clear_vely() {
  vely_ = 0;
  clear_has_vely();
}
inline float PacoteRoboIA::vely() const {
  return vely_;
}
inline void PacoteRoboIA::set_vely(float value) {
  set_has_vely();
  vely_ = value;
}

// optional float orientation = 6;
inline bool PacoteRoboIA::has_orientation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PacoteRoboIA::set_has_orientation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PacoteRoboIA::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PacoteRoboIA::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline float PacoteRoboIA::orientation() const {
  return orientation_;
}
inline void PacoteRoboIA::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
}

// optional string skill = 7;
inline bool PacoteRoboIA::has_skill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PacoteRoboIA::set_has_skill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PacoteRoboIA::clear_has_skill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PacoteRoboIA::clear_skill() {
  if (skill_ != &::google::protobuf::internal::kEmptyString) {
    skill_->clear();
  }
  clear_has_skill();
}
inline const ::std::string& PacoteRoboIA::skill() const {
  return *skill_;
}
inline void PacoteRoboIA::set_skill(const ::std::string& value) {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  skill_->assign(value);
}
inline void PacoteRoboIA::set_skill(const char* value) {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  skill_->assign(value);
}
inline void PacoteRoboIA::set_skill(const char* value, size_t size) {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  skill_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PacoteRoboIA::mutable_skill() {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  return skill_;
}
inline ::std::string* PacoteRoboIA::release_skill() {
  clear_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_;
    skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string tatica = 8;
inline bool PacoteRoboIA::has_tatica() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PacoteRoboIA::set_has_tatica() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PacoteRoboIA::clear_has_tatica() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PacoteRoboIA::clear_tatica() {
  if (tatica_ != &::google::protobuf::internal::kEmptyString) {
    tatica_->clear();
  }
  clear_has_tatica();
}
inline const ::std::string& PacoteRoboIA::tatica() const {
  return *tatica_;
}
inline void PacoteRoboIA::set_tatica(const ::std::string& value) {
  set_has_tatica();
  if (tatica_ == &::google::protobuf::internal::kEmptyString) {
    tatica_ = new ::std::string;
  }
  tatica_->assign(value);
}
inline void PacoteRoboIA::set_tatica(const char* value) {
  set_has_tatica();
  if (tatica_ == &::google::protobuf::internal::kEmptyString) {
    tatica_ = new ::std::string;
  }
  tatica_->assign(value);
}
inline void PacoteRoboIA::set_tatica(const char* value, size_t size) {
  set_has_tatica();
  if (tatica_ == &::google::protobuf::internal::kEmptyString) {
    tatica_ = new ::std::string;
  }
  tatica_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PacoteRoboIA::mutable_tatica() {
  set_has_tatica();
  if (tatica_ == &::google::protobuf::internal::kEmptyString) {
    tatica_ = new ::std::string;
  }
  return tatica_;
}
inline ::std::string* PacoteRoboIA::release_tatica() {
  clear_has_tatica();
  if (tatica_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tatica_;
    tatica_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string informacoesSensorias = 9;
inline int PacoteRoboIA::informacoessensorias_size() const {
  return informacoessensorias_.size();
}
inline void PacoteRoboIA::clear_informacoessensorias() {
  informacoessensorias_.Clear();
}
inline const ::std::string& PacoteRoboIA::informacoessensorias(int index) const {
  return informacoessensorias_.Get(index);
}
inline ::std::string* PacoteRoboIA::mutable_informacoessensorias(int index) {
  return informacoessensorias_.Mutable(index);
}
inline void PacoteRoboIA::set_informacoessensorias(int index, const ::std::string& value) {
  informacoessensorias_.Mutable(index)->assign(value);
}
inline void PacoteRoboIA::set_informacoessensorias(int index, const char* value) {
  informacoessensorias_.Mutable(index)->assign(value);
}
inline void PacoteRoboIA::set_informacoessensorias(int index, const char* value, size_t size) {
  informacoessensorias_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PacoteRoboIA::add_informacoessensorias() {
  return informacoessensorias_.Add();
}
inline void PacoteRoboIA::add_informacoessensorias(const ::std::string& value) {
  informacoessensorias_.Add()->assign(value);
}
inline void PacoteRoboIA::add_informacoessensorias(const char* value) {
  informacoessensorias_.Add()->assign(value);
}
inline void PacoteRoboIA::add_informacoessensorias(const char* value, size_t size) {
  informacoessensorias_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacoteRoboIA::informacoessensorias() const {
  return informacoessensorias_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PacoteRoboIA::mutable_informacoessensorias() {
  return &informacoessensorias_;
}

// optional float alvoX = 10;
inline bool PacoteRoboIA::has_alvox() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PacoteRoboIA::set_has_alvox() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PacoteRoboIA::clear_has_alvox() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PacoteRoboIA::clear_alvox() {
  alvox_ = 0;
  clear_has_alvox();
}
inline float PacoteRoboIA::alvox() const {
  return alvox_;
}
inline void PacoteRoboIA::set_alvox(float value) {
  set_has_alvox();
  alvox_ = value;
}

// optional float alvoY = 11;
inline bool PacoteRoboIA::has_alvoy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PacoteRoboIA::set_has_alvoy() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PacoteRoboIA::clear_has_alvoy() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PacoteRoboIA::clear_alvoy() {
  alvoy_ = 0;
  clear_has_alvoy();
}
inline float PacoteRoboIA::alvoy() const {
  return alvoy_;
}
inline void PacoteRoboIA::set_alvoy(float value) {
  set_has_alvoy();
  alvoy_ = value;
}

// optional .PacotePathPlanning pathPlanning = 12;
inline bool PacoteRoboIA::has_pathplanning() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PacoteRoboIA::set_has_pathplanning() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PacoteRoboIA::clear_has_pathplanning() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PacoteRoboIA::clear_pathplanning() {
  if (pathplanning_ != NULL) pathplanning_->::PacotePathPlanning::Clear();
  clear_has_pathplanning();
}
inline const ::PacotePathPlanning& PacoteRoboIA::pathplanning() const {
  return pathplanning_ != NULL ? *pathplanning_ : *default_instance_->pathplanning_;
}
inline ::PacotePathPlanning* PacoteRoboIA::mutable_pathplanning() {
  set_has_pathplanning();
  if (pathplanning_ == NULL) pathplanning_ = new ::PacotePathPlanning;
  return pathplanning_;
}
inline ::PacotePathPlanning* PacoteRoboIA::release_pathplanning() {
  clear_has_pathplanning();
  ::PacotePathPlanning* temp = pathplanning_;
  pathplanning_ = NULL;
  return temp;
}

// optional float vel_ang = 13;
inline bool PacoteRoboIA::has_vel_ang() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PacoteRoboIA::set_has_vel_ang() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PacoteRoboIA::clear_has_vel_ang() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PacoteRoboIA::clear_vel_ang() {
  vel_ang_ = 0;
  clear_has_vel_ang();
}
inline float PacoteRoboIA::vel_ang() const {
  return vel_ang_;
}
inline void PacoteRoboIA::set_vel_ang(float value) {
  set_has_vel_ang();
  vel_ang_ = value;
}

// optional float chute_baixo = 14;
inline bool PacoteRoboIA::has_chute_baixo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PacoteRoboIA::set_has_chute_baixo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PacoteRoboIA::clear_has_chute_baixo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PacoteRoboIA::clear_chute_baixo() {
  chute_baixo_ = 0;
  clear_has_chute_baixo();
}
inline float PacoteRoboIA::chute_baixo() const {
  return chute_baixo_;
}
inline void PacoteRoboIA::set_chute_baixo(float value) {
  set_has_chute_baixo();
  chute_baixo_ = value;
}

// optional float chute_alto = 15;
inline bool PacoteRoboIA::has_chute_alto() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PacoteRoboIA::set_has_chute_alto() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PacoteRoboIA::clear_has_chute_alto() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PacoteRoboIA::clear_chute_alto() {
  chute_alto_ = 0;
  clear_has_chute_alto();
}
inline float PacoteRoboIA::chute_alto() const {
  return chute_alto_;
}
inline void PacoteRoboIA::set_chute_alto(float value) {
  set_has_chute_alto();
  chute_alto_ = value;
}

// optional float drible_ligado = 16;
inline bool PacoteRoboIA::has_drible_ligado() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PacoteRoboIA::set_has_drible_ligado() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PacoteRoboIA::clear_has_drible_ligado() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PacoteRoboIA::clear_drible_ligado() {
  drible_ligado_ = 0;
  clear_has_drible_ligado();
}
inline float PacoteRoboIA::drible_ligado() const {
  return drible_ligado_;
}
inline void PacoteRoboIA::set_drible_ligado(float value) {
  set_has_drible_ligado();
  drible_ligado_ = value;
}

// -------------------------------------------------------------------

// PacoteIASimulador2D

// optional .PacoteBola bola = 1;
inline bool PacoteIASimulador2D::has_bola() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacoteIASimulador2D::set_has_bola() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacoteIASimulador2D::clear_has_bola() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacoteIASimulador2D::clear_bola() {
  if (bola_ != NULL) bola_->::PacoteBola::Clear();
  clear_has_bola();
}
inline const ::PacoteBola& PacoteIASimulador2D::bola() const {
  return bola_ != NULL ? *bola_ : *default_instance_->bola_;
}
inline ::PacoteBola* PacoteIASimulador2D::mutable_bola() {
  set_has_bola();
  if (bola_ == NULL) bola_ = new ::PacoteBola;
  return bola_;
}
inline ::PacoteBola* PacoteIASimulador2D::release_bola() {
  clear_has_bola();
  ::PacoteBola* temp = bola_;
  bola_ = NULL;
  return temp;
}

// optional .SSL_Referee dadosEstados = 2;
inline bool PacoteIASimulador2D::has_dadosestados() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacoteIASimulador2D::set_has_dadosestados() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacoteIASimulador2D::clear_has_dadosestados() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacoteIASimulador2D::clear_dadosestados() {
  if (dadosestados_ != NULL) dadosestados_->::SSL_Referee::Clear();
  clear_has_dadosestados();
}
inline const ::SSL_Referee& PacoteIASimulador2D::dadosestados() const {
  return dadosestados_ != NULL ? *dadosestados_ : *default_instance_->dadosestados_;
}
inline ::SSL_Referee* PacoteIASimulador2D::mutable_dadosestados() {
  set_has_dadosestados();
  if (dadosestados_ == NULL) dadosestados_ = new ::SSL_Referee;
  return dadosestados_;
}
inline ::SSL_Referee* PacoteIASimulador2D::release_dadosestados() {
  clear_has_dadosestados();
  ::SSL_Referee* temp = dadosestados_;
  dadosestados_ = NULL;
  return temp;
}

// optional string jogada = 3;
inline bool PacoteIASimulador2D::has_jogada() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacoteIASimulador2D::set_has_jogada() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacoteIASimulador2D::clear_has_jogada() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacoteIASimulador2D::clear_jogada() {
  if (jogada_ != &::google::protobuf::internal::kEmptyString) {
    jogada_->clear();
  }
  clear_has_jogada();
}
inline const ::std::string& PacoteIASimulador2D::jogada() const {
  return *jogada_;
}
inline void PacoteIASimulador2D::set_jogada(const ::std::string& value) {
  set_has_jogada();
  if (jogada_ == &::google::protobuf::internal::kEmptyString) {
    jogada_ = new ::std::string;
  }
  jogada_->assign(value);
}
inline void PacoteIASimulador2D::set_jogada(const char* value) {
  set_has_jogada();
  if (jogada_ == &::google::protobuf::internal::kEmptyString) {
    jogada_ = new ::std::string;
  }
  jogada_->assign(value);
}
inline void PacoteIASimulador2D::set_jogada(const char* value, size_t size) {
  set_has_jogada();
  if (jogada_ == &::google::protobuf::internal::kEmptyString) {
    jogada_ = new ::std::string;
  }
  jogada_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PacoteIASimulador2D::mutable_jogada() {
  set_has_jogada();
  if (jogada_ == &::google::protobuf::internal::kEmptyString) {
    jogada_ = new ::std::string;
  }
  return jogada_;
}
inline ::std::string* PacoteIASimulador2D::release_jogada() {
  clear_has_jogada();
  if (jogada_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jogada_;
    jogada_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string fatosDoMundo = 4;
inline int PacoteIASimulador2D::fatosdomundo_size() const {
  return fatosdomundo_.size();
}
inline void PacoteIASimulador2D::clear_fatosdomundo() {
  fatosdomundo_.Clear();
}
inline const ::std::string& PacoteIASimulador2D::fatosdomundo(int index) const {
  return fatosdomundo_.Get(index);
}
inline ::std::string* PacoteIASimulador2D::mutable_fatosdomundo(int index) {
  return fatosdomundo_.Mutable(index);
}
inline void PacoteIASimulador2D::set_fatosdomundo(int index, const ::std::string& value) {
  fatosdomundo_.Mutable(index)->assign(value);
}
inline void PacoteIASimulador2D::set_fatosdomundo(int index, const char* value) {
  fatosdomundo_.Mutable(index)->assign(value);
}
inline void PacoteIASimulador2D::set_fatosdomundo(int index, const char* value, size_t size) {
  fatosdomundo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PacoteIASimulador2D::add_fatosdomundo() {
  return fatosdomundo_.Add();
}
inline void PacoteIASimulador2D::add_fatosdomundo(const ::std::string& value) {
  fatosdomundo_.Add()->assign(value);
}
inline void PacoteIASimulador2D::add_fatosdomundo(const char* value) {
  fatosdomundo_.Add()->assign(value);
}
inline void PacoteIASimulador2D::add_fatosdomundo(const char* value, size_t size) {
  fatosdomundo_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacoteIASimulador2D::fatosdomundo() const {
  return fatosdomundo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PacoteIASimulador2D::mutable_fatosdomundo() {
  return &fatosdomundo_;
}

// repeated .PacoteRoboIA robos = 5;
inline int PacoteIASimulador2D::robos_size() const {
  return robos_.size();
}
inline void PacoteIASimulador2D::clear_robos() {
  robos_.Clear();
}
inline const ::PacoteRoboIA& PacoteIASimulador2D::robos(int index) const {
  return robos_.Get(index);
}
inline ::PacoteRoboIA* PacoteIASimulador2D::mutable_robos(int index) {
  return robos_.Mutable(index);
}
inline ::PacoteRoboIA* PacoteIASimulador2D::add_robos() {
  return robos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PacoteRoboIA >&
PacoteIASimulador2D::robos() const {
  return robos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PacoteRoboIA >*
PacoteIASimulador2D::mutable_robos() {
  return &robos_;
}

// repeated .PacoteRobo robosAdv = 6;
inline int PacoteIASimulador2D::robosadv_size() const {
  return robosadv_.size();
}
inline void PacoteIASimulador2D::clear_robosadv() {
  robosadv_.Clear();
}
inline const ::PacoteRobo& PacoteIASimulador2D::robosadv(int index) const {
  return robosadv_.Get(index);
}
inline ::PacoteRobo* PacoteIASimulador2D::mutable_robosadv(int index) {
  return robosadv_.Mutable(index);
}
inline ::PacoteRobo* PacoteIASimulador2D::add_robosadv() {
  return robosadv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PacoteRobo >&
PacoteIASimulador2D::robosadv() const {
  return robosadv_;
}
inline ::google::protobuf::RepeatedPtrField< ::PacoteRobo >*
PacoteIASimulador2D::mutable_robosadv() {
  return &robosadv_;
}

// required .PacoteIASimulador2D.CorEquipe corEquipe = 7;
inline bool PacoteIASimulador2D::has_corequipe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PacoteIASimulador2D::set_has_corequipe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PacoteIASimulador2D::clear_has_corequipe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PacoteIASimulador2D::clear_corequipe() {
  corequipe_ = 0;
  clear_has_corequipe();
}
inline ::PacoteIASimulador2D_CorEquipe PacoteIASimulador2D::corequipe() const {
  return static_cast< ::PacoteIASimulador2D_CorEquipe >(corequipe_);
}
inline void PacoteIASimulador2D::set_corequipe(::PacoteIASimulador2D_CorEquipe value) {
  GOOGLE_DCHECK(::PacoteIASimulador2D_CorEquipe_IsValid(value));
  set_has_corequipe();
  corequipe_ = value;
}

// optional .PacoteIASimulador2D.LadoCampo ladoCampo = 8;
inline bool PacoteIASimulador2D::has_ladocampo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PacoteIASimulador2D::set_has_ladocampo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PacoteIASimulador2D::clear_has_ladocampo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PacoteIASimulador2D::clear_ladocampo() {
  ladocampo_ = 0;
  clear_has_ladocampo();
}
inline ::PacoteIASimulador2D_LadoCampo PacoteIASimulador2D::ladocampo() const {
  return static_cast< ::PacoteIASimulador2D_LadoCampo >(ladocampo_);
}
inline void PacoteIASimulador2D::set_ladocampo(::PacoteIASimulador2D_LadoCampo value) {
  GOOGLE_DCHECK(::PacoteIASimulador2D_LadoCampo_IsValid(value));
  set_has_ladocampo();
  ladocampo_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PacoteIASimulador2D_CorEquipe>() {
  return ::PacoteIASimulador2D_CorEquipe_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PacoteIASimulador2D_LadoCampo>() {
  return ::PacoteIASimulador2D_LadoCampo_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mensagem_5fia_5fsimulador2D_2eproto__INCLUDED
